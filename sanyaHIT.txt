// ==UserScript==
// @name         EvoWorld.io — AutoHit vs Reapers (Larger Movable UI)
// @namespace    https://tampermonkey.net/
// @version      3.2
// @description  Удар по ghostlyReaper, pumpkinGhost, grimReaper з більшою пересувною табличкою AutoHit ON. Тогл — H.
// @author       KTM
// @match        https://evoworld.io/*
// @grant        none
// ==/UserScript==

(() => {
  'use strict';

  const TARGET_REAPERS = ['ghostlyReaper', 'pumpkinGhost', 'grimReaper'];

  // Хітбокси grimReaper із великим зсувом вліво
  const SCYTHE_HITBOX = {
    ghostlyReaper: { left: 10, top: 5, width: 15, height: 50 },
    pumpkinGhost:  { left: 15, top: 20, width: -15, height: 60 },
    grimReaper:    { left: 42, top: 63, width: -35, height: 141 }
  };

  let enabled = true;
  let hitAllowed = false;

  // Додати табличку на екран
  function addMovableUI() {
    const ui = document.createElement('div');
    ui.id = 'autohit-status';
    ui.style.position = 'fixed';
    ui.style.top = '20px';
    ui.style.left = '20px';
    ui.style.zIndex = '10000';
    ui.style.backgroundColor = '#222';
    ui.style.color = '#fff';
    ui.style.padding = '25px'; // Збільшено padding
    ui.style.border = '5px solid #555'; // Збільшено бордер
    ui.style.borderRadius = '12px'; // Збільшено радіус
    ui.style.cursor = 'move';
    ui.style.fontSize = '25px'; // Збільшено шрифт
    ui.innerHTML = `
      <div><strong>AutoHit ON</strong></div>
      <div style="font-size: 18px; color: #ccc;">Made By KTM</div>
    `;
    document.body.appendChild(ui);

    // Додати функціонал для пересування таблички
    let isDragging = false;
    let offsetX = 0, offsetY = 0;

    ui.addEventListener('mousedown', (e) => {
      isDragging = true;
      offsetX = e.clientX - ui.getBoundingClientRect().left;
      offsetY = e.clientY - ui.getBoundingClientRect().top;
    });

    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        ui.style.left = `${e.clientX - offsetX}px`;
        ui.style.top = `${e.clientY - offsetY}px`;
      }
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });
  }

  const wait = setInterval(() => {
    if (typeof game === 'undefined' || !game.drawObject || !game.me) return;
    clearInterval(wait);
    hookClient();
    addMovableUI();
    console.log('[AutoHit-reapers] активний (з великою пересувною табличкою).');
  }, 250);

  function hookClient() {
    window.addEventListener('keyup', e => {
      if (e.key.toLowerCase() === 'h') enabled = !enabled;
    });

    const origDrawObject = game.drawObject;
    game.drawObject = function (ent, ...rest) {
      if (enabled) processEntity(ent);
      return origDrawObject.call(this, ent, ...rest);
    };

    const origDraw = window.draw;
    window.draw = function (...args) {
      if (enabled) autoHit();
      hitAllowed = false;
      return origDraw.apply(this, args);
    };
  }

  function processEntity(ent) {
    if (!ent || ent === game.me || ent.inHide || !ent.position) return;
    if (!TARGET_REAPERS.includes(ent.name)) return;

    const scale = { x: game.zoom * game.scaleX, y: game.zoom * game.scaleY };
    const pos = game.getRenderPosition(ent.position.x, ent.position.y);
    const w = ent.width * scale.x, h = ent.height * scale.y;

    const hit = {
      left:   pos.x - w / 2 + ent.colliderRectangleOffset.left  * w,
      right:  pos.x - w / 2 + (1 - ent.colliderRectangleOffset.right) * w,
      top:    pos.y - h      + ent.colliderRectangleOffset.top  * h,
      bottom: pos.y - h      + (1 - ent.colliderRectangleOffset.bottom) * h,
    };

    const myName = game.me.name;
    const scythe = SCYTHE_HITBOX[myName];
    if (!scythe) return;

    const mp = game.getRenderPosition(game.me.position.x, game.me.position.y);
    const mw = game.me.width * scale.x, mh = game.me.height * scale.y;
    const center = { x: mp.x + mw / 2, y: mp.y - mh / 2 };

    const leftBox = {
      left:  center.x - (scythe.left * scale.x + scythe.width * scale.x),
      right: center.x -  scythe.left * scale.x,
      top:   center.y -  scythe.top  * scale.y,
      bottom:center.y -  scythe.top  * scale.y + scythe.height * scale.y,
    };
    const rightBox = {
      left:  center.x + scythe.left * scale.x,
      right: center.x + scythe.left * scale.x + scythe.width * scale.x,
      top:   leftBox.top,
      bottom:leftBox.bottom,
    };

    if (overlap(hit, leftBox) || overlap(hit, rightBox)) hitAllowed = true;
  }

  function autoHit() {
    if (!hitAllowed) return;
    if (game.me.skillCooldown > 40) return;

    if (hitAllowed) {
      console.log('Удар виконано');
      window.skillUse();
    }
  }

  const overlap = (a, b) =>
    !(a.left >= b.right || b.left >= a.right || a.top >= b.bottom || b.top >= a.bottom);

})();